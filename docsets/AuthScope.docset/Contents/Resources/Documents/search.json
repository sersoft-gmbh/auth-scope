{"Typealiases.html#/s:9AuthScope24_AccessRangeBaseProtocola":{"name":"_AccessRangeBaseProtocol","abstract":"<p>The base for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/AccessRangeProtocol.html\">AccessRangeProtocol</a></code>. This is an implementation detail and should not be used directly.</p>"},"Structs/Scope/Index.html#/s:9AuthScope0B0V5IndexV1loiySbAEyx_G_AGtFZ":{"name":"<(_:_:)","abstract":"<p>See <code>Comparable.&lt;</code></p>","parent_name":"Index"},"Structs/Scope.html#/s:9AuthScope0B0V12accessRangesACyxGShyxG_tcfc":{"name":"init(accessRanges:)","abstract":"<p>Creates a new scope with the given <code>Set</code> of access ranges.</p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V12accessRangesACyxGqd___tc7ElementQyd__RszSlRd__lufc":{"name":"init(accessRanges:)","abstract":"<p>Creates a new scope with the given collection of access ranges.</p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V12accessRangesACyxGxd_tcfc":{"name":"init(accessRanges:)","abstract":"<p>Creates a new scope with the given list of access ranges.</p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0VACyxGycfc":{"name":"init()","abstract":"<p>Creates a new, empty scope.</p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V4fromACyxGs7Decoder_p_tKcfc":{"name":"init(from:)","abstract":"<p>See: <code>Decodable.init(from:)</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V6encode2toys7Encoder_p_tKF":{"name":"encode(to:)","abstract":"<p>See: <code>Encodable.encode(to:)</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V7Elementa":{"name":"Element","abstract":"<p>See: <code>Collection.Element</code></p>","parent_name":"Scope"},"Structs/Scope/Index.html":{"name":"Index","abstract":"<p>The index type of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Scope.html\">Scope</a></code>.</p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V7isEmptySbvp":{"name":"isEmpty","abstract":"<p>See <code>Collection.isEmpty</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V10startIndexAC0D0Vyx_Gvp":{"name":"startIndex","abstract":"<p>See <code>Collection.startIndex</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V8endIndexAC0D0Vyx_Gvp":{"name":"endIndex","abstract":"<p>See <code>Collection.endIndex</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0VyxAC5IndexVyx_Gcip":{"name":"subscript(_:)","abstract":"<p>See <code>Collection.subscript(position:)</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V5index5afterAC5IndexVyx_GAH_tF":{"name":"index(after:)","abstract":"<p>See <code>Collection.index(after:)</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V6filteryACyxGSbxKXEKF":{"name":"filter(_:)","abstract":"<p>Filters the scope by calling <code>isIncluded</code> with each contained access range and only adding the ones for which it returns true to the result.</p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V11descriptionSSvp":{"name":"description","abstract":"<p>See <code>CustomStringConvertible.description</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V16debugDescriptionSSvp":{"name":"debugDescription","abstract":"<p>See <code>CustomDebugStringConvertible.debugDescription</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V16exactMatchRegExpSSvp":{"name":"exactMatchRegExp","abstract":"<p>Returns a regular expression string that matches a string that has exactly the access ranges in self (not more, not less).</p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V17containsAllRegExpSSvp":{"name":"containsAllRegExp","abstract":"<p>Returns a regular expression string that matches a string that has at least the access ranges in self (but can have more).</p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V17containsAnyRegExpSSvp":{"name":"containsAnyRegExp","abstract":"<p>Returns a regular expression string that matches a string that has at least one of access ranges in self (but not all).</p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V11scopeStringSSvp":{"name":"scopeString","abstract":"<p>A string containing all access ranges in self seperated by space.</p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V11scopeStringACyxGqd___tKcSyRd__lufc":{"name":"init(scopeString:)","abstract":"<p>Creates a new scope from a given scope string. Throws an error if the string contains invalid access ranges.</p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V19ArrayLiteralElementa":{"name":"ArrayLiteralElement","abstract":"<p>See <code>ExpressibleByArrayLiteral.ArrayLiteralElement</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V12arrayLiteralACyxGxd_tcfc":{"name":"init(arrayLiteral:)","abstract":"<p>See <code>ExpressibleByArrayLiteral.init(arrayLiteral:)</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V5unionyACyxGAEnF":{"name":"union(_:)","abstract":"<p>See <code>SetAlgebra.union(_:)</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V9formUnionyyACyxGnF":{"name":"formUnion(_:)","abstract":"<p>See <code>SetAlgebra.formUnion(_:)</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V12intersectionyACyxGAEF":{"name":"intersection(_:)","abstract":"<p>See <code>SetAlgebra.intersection(_:)</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V16formIntersectionyyACyxGF":{"name":"formIntersection(_:)","abstract":"<p>See <code>SetAlgebra.formIntersection(_:)</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V19symmetricDifferenceyACyxGAEnF":{"name":"symmetricDifference(_:)","abstract":"<p>See <code>SetAlgebra.symmetricDifference(_:)</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V23formSymmetricDifferenceyyACyxGnF":{"name":"formSymmetricDifference(_:)","abstract":"<p>See <code>SetAlgebra.formSymmetricDifference(_:)</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V6insertySb8inserted_x17memberAfterInserttxnF":{"name":"insert(_:)","abstract":"<p>See <code>SetAlgebra.insert(_:)</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V6update4withxSgxn_tF":{"name":"update(with:)","abstract":"<p>See <code>SetAlgebra.update(with:)</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0V6removeyxSgxF":{"name":"remove(_:)","abstract":"<p>See <code>SetAlgebra.remove(_:)</code></p>","parent_name":"Scope"},"Structs/Scope.html#/s:9AuthScope0B0VAAs12CaseIterableRzrlE3allACyxGvpZ":{"name":"all","abstract":"<p>Returns a scope with all possible access ranges.</p>","parent_name":"Scope"},"Structs/InvalidAccessRangeError.html#/s:9AuthScope23InvalidAccessRangeErrorV8rawValueSSvp":{"name":"rawValue","abstract":"<p>The raw value of the access range that didn&rsquo;t pass validation.</p>","parent_name":"InvalidAccessRangeError"},"Structs/InvalidAccessRangeError.html#/s:9AuthScope23InvalidAccessRangeErrorV06accessE4TypeypXpvp":{"name":"accessRangeType","abstract":"<p>The type of the access range that was used to validate above&rsquo;s <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/InvalidAccessRangeError.html#/s:9AuthScope23InvalidAccessRangeErrorV8rawValueSSvp\">rawValue</a></code>.</p>","parent_name":"InvalidAccessRangeError"},"Structs/InvalidAccessRangeError.html#/s:9AuthScope23InvalidAccessRangeErrorV11descriptionSSvp":{"name":"description","abstract":"<p>See: <code>CustomStringConvertible.description</code></p>","parent_name":"InvalidAccessRangeError"},"Structs/InvalidAccessRangeError.html#/s:9AuthScope23InvalidAccessRangeErrorV16debugDescriptionSSvp":{"name":"debugDescription","abstract":"<p>See: <code>CustomDebugStringConvertible.debugDescription</code></p>","parent_name":"InvalidAccessRangeError"},"Structs/InvalidAccessRangeError.html":{"name":"InvalidAccessRangeError","abstract":"<p>The error thrown when an access range is initialized with an invalid raw value.</p>"},"Structs/Scope.html":{"name":"Scope"},"Protocols/AccessRangeProtocol.html#/s:9AuthScope19AccessRangeProtocolP10validatingxqd___tKcSyRd__lufc":{"name":"init(validating:)","abstract":"<p>Creates an access range with the given raw value or throws an error (typically <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/InvalidAccessRangeError.html\">InvalidAccessRangeError</a></code>) if it&rsquo;s not a valid raw value.</p>","parent_name":"AccessRangeProtocol"},"Protocols.html#/_AccessRangeBaseProtocol":{"name":"_AccessRangeBaseProtocol","abstract":"<p>The base for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/AccessRangeProtocol.html\">AccessRangeProtocol</a></code>. This is an implementation detail and should not be used directly.</p>"},"Protocols/AccessRangeProtocol.html":{"name":"AccessRangeProtocol","abstract":"<p>Describes an access range type. Typically an enum.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}